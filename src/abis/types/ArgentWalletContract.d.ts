/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BaseContract, BigNumber, BigNumberish, CallOverrides, ContractTransaction, ethers, Overrides, PopulatedTransaction, Signer } from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, Result } from '@ethersproject/abi'
import type { TypedEvent, TypedEventFilter, TypedListener } from './common'

interface ArgentWalletContractInterface extends ethers.utils.Interface {
    functions: {
        'wc_multiCall(tuple[])': FunctionFragment;
        'isValidSignature(bytes32,bytes)': FunctionFragment;
    };
    events: {};

    encodeFunctionData(
        functionFragment: 'wc_multiCall',
        values: [{ to: string; value: BigNumberish; data: BytesLike }[]]
    ): string;

    encodeFunctionData(
        functionFragment: 'isValidSignature',
        values: [BytesLike, BytesLike]
    ): string;

    decodeFunctionResult(
        functionFragment: 'wc_multiCall',
        data: BytesLike
    ): Result;

    decodeFunctionResult(
        functionFragment: 'isValidSignature',
        data: BytesLike
    ): Result;
}

export class ArgentWalletContract extends BaseContract {
    interface: ArgentWalletContractInterface
    functions: {
        wc_multiCall(
            _transactions: { to: string; value: BigNumberish; data: BytesLike }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isValidSignature(
            _msgHash: BytesLike,
            _signature: BytesLike,
            overrides?: CallOverrides
        ): Promise<[string]>;
    }
    callStatic: {
        wc_multiCall(
            _transactions: { to: string; value: BigNumberish; data: BytesLike }[],
            overrides?: CallOverrides
        ): Promise<string[]>;

        isValidSignature(
            _msgHash: BytesLike,
            _signature: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;
    }
    filters: {}
    estimateGas: {
        wc_multiCall(
            _transactions: { to: string; value: BigNumberish; data: BytesLike }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isValidSignature(
            _msgHash: BytesLike,
            _signature: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    }
    populateTransaction: {
        wc_multiCall(
            _transactions: { to: string; value: BigNumberish; data: BytesLike }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isValidSignature(
            _msgHash: BytesLike,
            _signature: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    }

    connect(signerOrProvider: Signer | Provider | string): this;

    attach(addressOrName: string): this;

    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;

    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;

    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;

    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;

    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;

    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;

    listeners(eventName?: string): Array<Listener>;

    off(eventName: string, listener: Listener): this;

    on(eventName: string, listener: Listener): this;

    once(eventName: string, listener: Listener): this;

    removeListener(eventName: string, listener: Listener): this;

    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    wc_multiCall(
        _transactions: { to: string; value: BigNumberish; data: BytesLike }[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isValidSignature(
        _msgHash: BytesLike,
        _signature: BytesLike,
        overrides?: CallOverrides
    ): Promise<string>;
}
