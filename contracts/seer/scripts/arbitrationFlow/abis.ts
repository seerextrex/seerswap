export const realitioForeignArbitrationProxyAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_amb", internalType: "contract IAMB", type: "address" },
      { name: "_homeProxy", internalType: "address", type: "address" },
      { name: "_homeChainId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_arbitrator",
        internalType: "contract IArbitrator",
        type: "address",
      },
      { name: "_arbitratorExtraData", internalType: "bytes", type: "bytes" },
      { name: "_metaEvidence", internalType: "string", type: "string" },
      { name: "_termsOfService", internalType: "string", type: "string" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_questionID",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "_requester",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ArbitrationCanceled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_questionID",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "_requester",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "_disputeID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "ArbitrationCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_questionID",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "_requester",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ArbitrationFailed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_questionID",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "_requester",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "_maxPrevious",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ArbitrationRequested",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_arbitrator",
        internalType: "contract IArbitrator",
        type: "address",
        indexed: true,
      },
      {
        name: "_disputeID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "_metaEvidenceID",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "_evidenceGroupID",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Dispute",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_arbitrator",
        internalType: "contract IArbitrator",
        type: "address",
        indexed: true,
      },
      {
        name: "_evidenceGroupID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "_party",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "_evidence",
        internalType: "string",
        type: "string",
        indexed: false,
      },
    ],
    name: "Evidence",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_metaEvidenceID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "_evidence",
        internalType: "string",
        type: "string",
        indexed: false,
      },
    ],
    name: "MetaEvidence",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "_arbitrator",
        internalType: "contract IArbitrator",
        type: "address",
        indexed: true,
      },
      {
        name: "_disputeID",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "_ruling",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Ruling",
  },
  {
    type: "function",
    inputs: [],
    name: "META_EVIDENCE_ID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "NUMBER_OF_CHOICES_FOR_ARBITRATOR",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "amb",
    outputs: [{ name: "", internalType: "contract IAMB", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "bytes32", type: "bytes32" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "arbitrationRequests",
    outputs: [
      {
        name: "status",
        internalType: "enum RealitioForeignArbitrationProxy.Status",
        type: "uint8",
      },
      { name: "deposit", internalType: "uint248", type: "uint248" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "arbitrator",
    outputs: [
      { name: "", internalType: "contract IArbitrator", type: "address" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "arbitratorExtraData",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "disputeIDToDisputeDetails",
    outputs: [
      { name: "questionID", internalType: "bytes32", type: "bytes32" },
      { name: "requester", internalType: "address", type: "address" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "_questionID", internalType: "bytes32", type: "bytes32" }],
    name: "getDisputeFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_questionID", internalType: "bytes32", type: "bytes32" },
      { name: "_requester", internalType: "address", type: "address" },
    ],
    name: "handleFailedDisputeCreation",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "homeChainId",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [],
    name: "homeProxy",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "questionIDToDisputeExists",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    inputs: [
      { name: "_questionID", internalType: "bytes32", type: "bytes32" },
      { name: "_requester", internalType: "address", type: "address" },
    ],
    name: "receiveArbitrationAcknowledgement",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_questionID", internalType: "bytes32", type: "bytes32" },
      { name: "_requester", internalType: "address", type: "address" },
    ],
    name: "receiveArbitrationCancelation",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [
      { name: "_questionID", internalType: "bytes32", type: "bytes32" },
      { name: "_maxPrevious", internalType: "uint256", type: "uint256" },
    ],
    name: "requestArbitration",
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    inputs: [
      { name: "_disputeID", internalType: "uint256", type: "uint256" },
      { name: "_ruling", internalType: "uint256", type: "uint256" },
    ],
    name: "rule",
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    inputs: [],
    name: "termsOfService",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view",
  },
];

export const foreignAMBAbi = [
  {
    constant: true,
    inputs: [],
    name: "transactionHash",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "sourceChainId",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_txHash", type: "bytes32" }],
    name: "relayedMessages",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_data", type: "bytes" },
      { name: "_signatures", type: "bytes" },
    ],
    name: "safeExecuteSignaturesWithAutoGasLimit",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_sourceChainId", type: "uint256" },
      { name: "_destinationChainId", type: "uint256" },
      { name: "_validatorContract", type: "address" },
      { name: "_maxGasPerTx", type: "uint256" },
      { name: "_gasPrice", type: "uint256" },
      { name: "_requiredBlockConfirmations", type: "uint256" },
      { name: "_owner", type: "address" },
    ],
    name: "initialize",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isInitialized",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "requiredBlockConfirmations",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_data", type: "bytes" },
      { name: "_signatures", type: "bytes" },
    ],
    name: "executeSignatures",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "failedMessageReceiver",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getBridgeMode",
    outputs: [{ name: "_data", type: "bytes4" }],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_sourceChainId", type: "uint256" },
      { name: "_destinationChainId", type: "uint256" },
    ],
    name: "setChainIds",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "failedMessageSender",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "allowReentrantRequests",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "messageId",
    outputs: [{ name: "id", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_token", type: "address" },
      { name: "_to", type: "address" },
    ],
    name: "claimTokens",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_maxGasPerTx", type: "uint256" }],
    name: "setMaxGasPerTx",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "requiredSignatures",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "validatorContract",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "deployedAtBlock",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getBridgeInterfacesVersion",
    outputs: [
      { name: "major", type: "uint64" },
      { name: "minor", type: "uint64" },
      { name: "patch", type: "uint64" },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "messageSourceChainId",
    outputs: [{ name: "id", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_blockConfirmations", type: "uint256" }],
    name: "setRequiredBlockConfirmations",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "destinationChainId",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_gasPrice", type: "uint256" }],
    name: "setGasPrice",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_enable", type: "bool" }],
    name: "setAllowReentrantRequests",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "messageCallStatus",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "messageSender",
    outputs: [{ name: "sender", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimalShift",
    outputs: [{ name: "", type: "int256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_contract", type: "address" },
      { name: "_data", type: "bytes" },
      { name: "_gas", type: "uint256" },
    ],
    name: "requireToPassMessage",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "failedMessageDataHash",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "maxGasPerTx",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_data", type: "bytes" },
      { name: "_signatures", type: "bytes" },
      { name: "_gas", type: "uint32" },
    ],
    name: "safeExecuteSignaturesWithGasLimit",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_data", type: "bytes" },
      { name: "_signatures", type: "bytes" },
    ],
    name: "safeExecuteSignatures",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "gasPrice",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "messageId", type: "bytes32" },
      { indexed: false, name: "encodedData", type: "bytes" },
    ],
    name: "UserRequestForAffirmation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "sender", type: "address" },
      { indexed: true, name: "executor", type: "address" },
      { indexed: true, name: "messageId", type: "bytes32" },
      { indexed: false, name: "status", type: "bool" },
    ],
    name: "RelayedMessage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: "gasPrice", type: "uint256" }],
    name: "GasPriceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "requiredBlockConfirmations", type: "uint256" },
    ],
    name: "RequiredBlockConfirmationChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "previousOwner", type: "address" },
      { indexed: false, name: "newOwner", type: "address" },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
];

export const foreignAmbProxyAbi = [
  {
    constant: false,
    inputs: [
      { name: "version", type: "uint256" },
      { name: "implementation", type: "address" },
    ],
    name: "upgradeTo",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "version",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "upgradeabilityOwner",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "version", type: "uint256" },
      { name: "implementation", type: "address" },
      { name: "data", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "newOwner", type: "address" }],
    name: "transferProxyOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  { payable: true, stateMutability: "payable", type: "fallback" },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "previousOwner", type: "address" },
      { indexed: false, name: "newOwner", type: "address" },
    ],
    name: "ProxyOwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "version", type: "uint256" },
      { indexed: true, name: "implementation", type: "address" },
    ],
    name: "Upgraded",
    type: "event",
  },
];

export const homeAmbProxyAbi = [
  {
    constant: false,
    inputs: [
      { name: "version", type: "uint256" },
      { name: "implementation", type: "address" },
    ],
    name: "upgradeTo",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "version",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "upgradeabilityOwner",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "version", type: "uint256" },
      { name: "implementation", type: "address" },
      { name: "data", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "newOwner", type: "address" }],
    name: "transferProxyOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  { payable: true, stateMutability: "payable", type: "fallback" },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "previousOwner", type: "address" },
      { indexed: false, name: "newOwner", type: "address" },
    ],
    name: "ProxyOwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "version", type: "uint256" },
      { indexed: true, name: "implementation", type: "address" },
    ],
    name: "Upgraded",
    type: "event",
  },
];

export const homeAMBAbi = [
  {
    constant: true,
    inputs: [],
    name: "transactionHash",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_message", type: "bytes32" }],
    name: "numMessagesSigned",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_messageId", type: "bytes32" },
      { name: "_status", type: "bool" },
      { name: "_result", type: "bytes" },
    ],
    name: "confirmInformation",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "sourceChainId",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      { name: "_hash", type: "bytes32" },
      { name: "_index", type: "uint256" },
    ],
    name: "signature",
    outputs: [{ name: "", type: "bytes" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_sourceChainId", type: "uint256" },
      { name: "_destinationChainId", type: "uint256" },
      { name: "_validatorContract", type: "address" },
      { name: "_maxGasPerTx", type: "uint256" },
      { name: "_gasPrice", type: "uint256" },
      { name: "_requiredBlockConfirmations", type: "uint256" },
      { name: "_owner", type: "address" },
    ],
    name: "initialize",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isInitialized",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "requiredBlockConfirmations",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "failedMessageReceiver",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getBridgeMode",
    outputs: [{ name: "_data", type: "bytes4" }],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_sourceChainId", type: "uint256" },
      { name: "_destinationChainId", type: "uint256" },
    ],
    name: "setChainIds",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_hash", type: "bytes32" }],
    name: "message",
    outputs: [{ name: "", type: "bytes" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "failedMessageSender",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "allowReentrantRequests",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_requestSelector", type: "bytes32" },
      { name: "_data", type: "bytes" },
    ],
    name: "requireToGetInformation",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "signature", type: "bytes" },
      { name: "message", type: "bytes" },
    ],
    name: "submitSignature",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "messageId",
    outputs: [{ name: "id", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_token", type: "address" },
      { name: "_to", type: "address" },
    ],
    name: "claimTokens",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_hash", type: "bytes32" }],
    name: "numAffirmationsSigned",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_hash", type: "bytes32" }],
    name: "affirmationsSigned",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_maxGasPerTx", type: "uint256" }],
    name: "setMaxGasPerTx",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "migrateTo_6_2_0",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "requiredSignatures",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_message", type: "bytes32" }],
    name: "messagesSigned",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_contract", type: "address" },
      { name: "_data", type: "bytes" },
      { name: "_gas", type: "uint256" },
    ],
    name: "requireToConfirmMessage",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "validatorContract",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "deployedAtBlock",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getBridgeInterfacesVersion",
    outputs: [
      { name: "major", type: "uint64" },
      { name: "minor", type: "uint64" },
      { name: "patch", type: "uint64" },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "messageSourceChainId",
    outputs: [{ name: "id", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_blockConfirmations", type: "uint256" }],
    name: "setRequiredBlockConfirmations",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "destinationChainId",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_gasPrice", type: "uint256" }],
    name: "setGasPrice",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_enable", type: "bool" }],
    name: "setAllowReentrantRequests",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_requestSelector", type: "bytes32" },
      { name: "_enable", type: "bool" },
    ],
    name: "enableAsyncRequestSelector",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "messageCallStatus",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "messageSender",
    outputs: [{ name: "sender", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimalShift",
    outputs: [{ name: "", type: "int256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_contract", type: "address" },
      { name: "_data", type: "bytes" },
      { name: "_gas", type: "uint256" },
    ],
    name: "requireToPassMessage",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_messageId", type: "bytes32" }],
    name: "failedMessageDataHash",
    outputs: [{ name: "", type: "bytes32" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "maxGasPerTx",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "message", type: "bytes" }],
    name: "executeAffirmation",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_requestSelector", type: "bytes32" }],
    name: "isAsyncRequestSelectorEnabled",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "gasPrice",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_number", type: "uint256" }],
    name: "isAlreadyProcessed",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "messageId", type: "bytes32" },
      { indexed: false, name: "encodedData", type: "bytes" },
    ],
    name: "UserRequestForSignature",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "sender", type: "address" },
      { indexed: true, name: "executor", type: "address" },
      { indexed: true, name: "messageId", type: "bytes32" },
      { indexed: false, name: "status", type: "bool" },
    ],
    name: "AffirmationCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "messageId", type: "bytes32" },
      { indexed: true, name: "requestSelector", type: "bytes32" },
      { indexed: true, name: "sender", type: "address" },
      { indexed: false, name: "data", type: "bytes" },
    ],
    name: "UserRequestForInformation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "signer", type: "address" },
      { indexed: true, name: "messageId", type: "bytes32" },
    ],
    name: "SignedForInformation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "messageId", type: "bytes32" },
      { indexed: false, name: "status", type: "bool" },
      { indexed: false, name: "callbackStatus", type: "bool" },
    ],
    name: "InformationRetrieved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "requestSelector", type: "bytes32" },
      { indexed: false, name: "enable", type: "bool" },
    ],
    name: "EnabledAsyncRequestSelector",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "signer", type: "address" },
      { indexed: false, name: "messageHash", type: "bytes32" },
    ],
    name: "SignedForUserRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: "signer", type: "address" },
      { indexed: false, name: "messageHash", type: "bytes32" },
    ],
    name: "SignedForAffirmation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "authorityResponsibleForRelay", type: "address" },
      { indexed: false, name: "messageHash", type: "bytes32" },
      { indexed: false, name: "NumberOfCollectedSignatures", type: "uint256" },
    ],
    name: "CollectedSignatures",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: "gasPrice", type: "uint256" }],
    name: "GasPriceChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "requiredBlockConfirmations", type: "uint256" },
    ],
    name: "RequiredBlockConfirmationChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "previousOwner", type: "address" },
      { indexed: false, name: "newOwner", type: "address" },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
];

export const homeProxyAbi = [
  {
    inputs: [
      { internalType: "contract IAMB", name: "_amb", type: "address" },
      { internalType: "address", name: "_foreignProxy", type: "address" },
      { internalType: "bytes32", name: "_foreignChainId", type: "bytes32" },
      {
        internalType: "contract RealitioInterface",
        name: "_realitio",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_questionID",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_requester",
        type: "address",
      },
    ],
    name: "ArbitrationFailed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_questionID",
        type: "bytes32",
      },
    ],
    name: "ArbitrationFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_questionID",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_answer",
        type: "bytes32",
      },
    ],
    name: "ArbitratorAnswered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_questionID",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_requester",
        type: "address",
      },
    ],
    name: "RequestAcknowledged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_questionID",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_requester",
        type: "address",
      },
    ],
    name: "RequestCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_questionID",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_maxPrevious",
        type: "uint256",
      },
    ],
    name: "RequestNotified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_questionID",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_maxPrevious",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_reason",
        type: "string",
      },
    ],
    name: "RequestRejected",
    type: "event",
  },
  {
    inputs: [],
    name: "amb",
    outputs: [{ internalType: "contract IAMB", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "foreignChainId",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "foreignProxy",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_questionID", type: "bytes32" },
      { internalType: "address", name: "_requester", type: "address" },
    ],
    name: "handleNotifiedRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_questionID", type: "bytes32" },
      { internalType: "address", name: "_requester", type: "address" },
    ],
    name: "handleRejectedRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "metadata",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    name: "questionIDToRequester",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "realitio",
    outputs: [
      { internalType: "contract RealitioInterface", name: "", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_questionID", type: "bytes32" },
      { internalType: "bytes32", name: "_answer", type: "bytes32" },
    ],
    name: "receiveArbitrationAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_questionID", type: "bytes32" },
      { internalType: "address", name: "_requester", type: "address" },
    ],
    name: "receiveArbitrationFailure",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_questionID", type: "bytes32" },
      { internalType: "address", name: "_requester", type: "address" },
      { internalType: "uint256", name: "_maxPrevious", type: "uint256" },
    ],
    name: "receiveArbitrationRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_questionID", type: "bytes32" },
      { internalType: "bytes32", name: "_lastHistoryHash", type: "bytes32" },
      {
        internalType: "bytes32",
        name: "_lastAnswerOrCommitmentID",
        type: "bytes32",
      },
      { internalType: "address", name: "_lastAnswerer", type: "address" },
    ],
    name: "reportArbitrationAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "", type: "bytes32" },
      { internalType: "address", name: "", type: "address" },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "enum RealitioHomeArbitrationProxy.Status",
        name: "status",
        type: "uint8",
      },
      { internalType: "bytes32", name: "arbitratorAnswer", type: "bytes32" },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export const realitioAbi = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: true,
        internalType: "bytes32",
        name: "answer_hash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "answer",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
    ],
    name: "LogAnswerReveal",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
    ],
    name: "LogCancelArbitration",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "LogClaim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "answer",
        type: "bytes32",
      },
    ],
    name: "LogFinalize",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bounty_added",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bounty",
        type: "uint256",
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
    ],
    name: "LogFundAnswerBounty",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "min_bond",
        type: "uint256",
      },
    ],
    name: "LogMinimumBond",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "answer",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "history_hash",
        type: "bytes32",
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
      { indexed: false, internalType: "uint256", name: "ts", type: "uint256" },
      {
        indexed: false,
        internalType: "bool",
        name: "is_commitment",
        type: "bool",
      },
    ],
    name: "LogNewAnswer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "template_id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "question",
        type: "string",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "content_hash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "arbitrator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "timeout",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "opening_ts",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "created",
        type: "uint256",
      },
    ],
    name: "LogNewQuestion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "template_id",
        type: "uint256",
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "string",
        name: "question_text",
        type: "string",
      },
    ],
    name: "LogNewTemplate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      { indexed: true, internalType: "address", name: "user", type: "address" },
    ],
    name: "LogNotifyOfArbitrationRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "question_id",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "reopened_question_id",
        type: "bytes32",
      },
    ],
    name: "LogReopenQuestion",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "arbitrator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "LogSetQuestionFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "LogWithdraw",
    type: "event",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "arbitrator_question_fees",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "template_id", type: "uint256" },
      { internalType: "string", name: "question", type: "string" },
      { internalType: "address", name: "arbitrator", type: "address" },
      { internalType: "uint32", name: "timeout", type: "uint32" },
      { internalType: "uint32", name: "opening_ts", type: "uint32" },
      { internalType: "uint256", name: "nonce", type: "uint256" },
    ],
    name: "askQuestion",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "template_id", type: "uint256" },
      { internalType: "string", name: "question", type: "string" },
      { internalType: "address", name: "arbitrator", type: "address" },
      { internalType: "uint32", name: "timeout", type: "uint32" },
      { internalType: "uint32", name: "opening_ts", type: "uint32" },
      { internalType: "uint256", name: "nonce", type: "uint256" },
      { internalType: "uint256", name: "min_bond", type: "uint256" },
    ],
    name: "askQuestionWithMinBond",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32", name: "answer", type: "bytes32" },
      { internalType: "address", name: "payee_if_wrong", type: "address" },
      { internalType: "bytes32", name: "last_history_hash", type: "bytes32" },
      {
        internalType: "bytes32",
        name: "last_answer_or_commitment_id",
        type: "bytes32",
      },
      { internalType: "address", name: "last_answerer", type: "address" },
    ],
    name: "assignWinnerAndSubmitAnswerByArbitrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "cancelArbitration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32[]", name: "question_ids", type: "bytes32[]" },
      { internalType: "uint256[]", name: "lengths", type: "uint256[]" },
      { internalType: "bytes32[]", name: "hist_hashes", type: "bytes32[]" },
      { internalType: "address[]", name: "addrs", type: "address[]" },
      { internalType: "uint256[]", name: "bonds", type: "uint256[]" },
      { internalType: "bytes32[]", name: "answers", type: "bytes32[]" },
    ],
    name: "claimMultipleAndWithdrawBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32[]", name: "history_hashes", type: "bytes32[]" },
      { internalType: "address[]", name: "addrs", type: "address[]" },
      { internalType: "uint256[]", name: "bonds", type: "uint256[]" },
      { internalType: "bytes32[]", name: "answers", type: "bytes32[]" },
    ],
    name: "claimWinnings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    name: "commitments",
    outputs: [
      { internalType: "uint32", name: "reveal_ts", type: "uint32" },
      { internalType: "bool", name: "is_revealed", type: "bool" },
      { internalType: "bytes32", name: "revealed_answer", type: "bytes32" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "string", name: "content", type: "string" }],
    name: "createTemplate",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "string", name: "content", type: "string" },
      { internalType: "string", name: "question", type: "string" },
      { internalType: "address", name: "arbitrator", type: "address" },
      { internalType: "uint32", name: "timeout", type: "uint32" },
      { internalType: "uint32", name: "opening_ts", type: "uint32" },
      { internalType: "uint256", name: "nonce", type: "uint256" },
    ],
    name: "createTemplateAndAskQuestion",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "fundAnswerBounty",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getArbitrator",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getBestAnswer",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getBond",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getBounty",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getContentHash",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getFinalAnswer",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32", name: "content_hash", type: "bytes32" },
      { internalType: "address", name: "arbitrator", type: "address" },
      { internalType: "uint32", name: "min_timeout", type: "uint32" },
      { internalType: "uint256", name: "min_bond", type: "uint256" },
    ],
    name: "getFinalAnswerIfMatches",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getFinalizeTS",
    outputs: [{ internalType: "uint32", name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getHistoryHash",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getMinBond",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getOpeningTS",
    outputs: [{ internalType: "uint32", name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "getTimeout",
    outputs: [{ internalType: "uint32", name: "", type: "uint32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "isFinalized",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "isPendingArbitration",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "isSettledTooSoon",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "address", name: "requester", type: "address" },
      { internalType: "uint256", name: "max_previous", type: "uint256" },
    ],
    name: "notifyOfArbitrationRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    name: "question_claims",
    outputs: [
      { internalType: "address", name: "payee", type: "address" },
      { internalType: "uint256", name: "last_bond", type: "uint256" },
      { internalType: "uint256", name: "queued_funds", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    name: "questions",
    outputs: [
      { internalType: "bytes32", name: "content_hash", type: "bytes32" },
      { internalType: "address", name: "arbitrator", type: "address" },
      { internalType: "uint32", name: "opening_ts", type: "uint32" },
      { internalType: "uint32", name: "timeout", type: "uint32" },
      { internalType: "uint32", name: "finalize_ts", type: "uint32" },
      { internalType: "bool", name: "is_pending_arbitration", type: "bool" },
      { internalType: "uint256", name: "bounty", type: "uint256" },
      { internalType: "bytes32", name: "best_answer", type: "bytes32" },
      { internalType: "bytes32", name: "history_hash", type: "bytes32" },
      { internalType: "uint256", name: "bond", type: "uint256" },
      { internalType: "uint256", name: "min_bond", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "template_id", type: "uint256" },
      { internalType: "string", name: "question", type: "string" },
      { internalType: "address", name: "arbitrator", type: "address" },
      { internalType: "uint32", name: "timeout", type: "uint32" },
      { internalType: "uint32", name: "opening_ts", type: "uint32" },
      { internalType: "uint256", name: "nonce", type: "uint256" },
      { internalType: "uint256", name: "min_bond", type: "uint256" },
      { internalType: "bytes32", name: "reopens_question_id", type: "bytes32" },
    ],
    name: "reopenQuestion",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    name: "reopened_questions",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    name: "reopener_questions",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "resultFor",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes32", name: "question_id", type: "bytes32" }],
    name: "resultForOnceSettled",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "fee", type: "uint256" }],
    name: "setQuestionFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32", name: "answer", type: "bytes32" },
      { internalType: "uint256", name: "max_previous", type: "uint256" },
    ],
    name: "submitAnswer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32", name: "answer", type: "bytes32" },
      { internalType: "address", name: "answerer", type: "address" },
    ],
    name: "submitAnswerByArbitrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32", name: "answer_hash", type: "bytes32" },
      { internalType: "uint256", name: "max_previous", type: "uint256" },
      { internalType: "address", name: "_answerer", type: "address" },
    ],
    name: "submitAnswerCommitment",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32", name: "answer", type: "bytes32" },
      { internalType: "uint256", name: "max_previous", type: "uint256" },
      { internalType: "address", name: "answerer", type: "address" },
    ],
    name: "submitAnswerFor",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "question_id", type: "bytes32" },
      { internalType: "bytes32", name: "answer", type: "bytes32" },
      { internalType: "uint256", name: "nonce", type: "uint256" },
      { internalType: "uint256", name: "bond", type: "uint256" },
    ],
    name: "submitAnswerReveal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "template_hashes",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    name: "templates",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export const validatorProxyAbi = [
  {
    constant: false,
    inputs: [
      { name: "version", type: "uint256" },
      { name: "implementation", type: "address" },
    ],
    name: "upgradeTo",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "version",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "upgradeabilityOwner",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "version", type: "uint256" },
      { name: "implementation", type: "address" },
      { name: "data", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "newOwner", type: "address" }],
    name: "transferProxyOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  { payable: true, stateMutability: "payable", type: "fallback" },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "previousOwner", type: "address" },
      { indexed: false, name: "newOwner", type: "address" },
    ],
    name: "ProxyOwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "version", type: "uint256" },
      { indexed: true, name: "implementation", type: "address" },
    ],
    name: "Upgraded",
    type: "event",
  },
];

export const validatorImplementationAbi = [
  {
    constant: true,
    inputs: [],
    name: "validatorCount",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getBridgeValidatorsInterfacesVersion",
    outputs: [
      { name: "major", type: "uint64" },
      { name: "minor", type: "uint64" },
      { name: "patch", type: "uint64" },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "isInitialized",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_validator", type: "address" }],
    name: "removeValidator",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_validator", type: "address" }],
    name: "addValidator",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      { name: "_requiredSignatures", type: "uint256" },
      { name: "_initialValidators", type: "address[]" },
      { name: "_owner", type: "address" },
    ],
    name: "initialize",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "validatorList",
    outputs: [{ name: "", type: "address[]" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "_requiredSignatures", type: "uint256" }],
    name: "setRequiredSignatures",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "requiredSignatures",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_address", type: "address" }],
    name: "getNextValidator",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "owner",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_validator", type: "address" }],
    name: "isValidatorDuty",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "deployedAtBlock",
    outputs: [{ name: "", type: "uint256" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "F_ADDR",
    outputs: [{ name: "", type: "address" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [{ name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [{ name: "_validator", type: "address" }],
    name: "isValidator",
    outputs: [{ name: "", type: "bool" }],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: "validator", type: "address" }],
    name: "ValidatorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: "validator", type: "address" }],
    name: "ValidatorRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: "requiredSignatures", type: "uint256" }],
    name: "RequiredSignaturesChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: "previousOwner", type: "address" },
      { indexed: false, name: "newOwner", type: "address" },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
];
