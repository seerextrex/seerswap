/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EternalFarmingInterface extends ethers.utils.Interface {
  functions: {
    "addRewards(tuple,uint256,uint256)": FunctionFragment;
    "attachIncentive(tuple)": FunctionFragment;
    "claimReward(address,address,uint256)": FunctionFragment;
    "claimRewardFrom(address,address,address,uint256)": FunctionFragment;
    "collectRewards(tuple,uint256,address)": FunctionFragment;
    "createIncentive(tuple,uint256,uint256,uint128,uint128)": FunctionFragment;
    "deployer()": FunctionFragment;
    "detachIncentive(tuple)": FunctionFragment;
    "enterFarming(tuple,uint256)": FunctionFragment;
    "exitFarming(tuple,uint256,address)": FunctionFragment;
    "farmingCenter()": FunctionFragment;
    "farms(uint256,bytes32)": FunctionFragment;
    "getRewardInfo(tuple,uint256)": FunctionFragment;
    "incentives(bytes32)": FunctionFragment;
    "maxIncentiveDuration()": FunctionFragment;
    "maxIncentiveStartLeadTime()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "setFarmingCenterAddress(address)": FunctionFragment;
    "setIncentiveMaker(address)": FunctionFragment;
    "setRates(tuple,uint128,uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewards",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attachIncentive",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardFrom",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRewards",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncentive",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "detachIncentive",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enterFarming",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitFarming",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingCenter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farms",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardInfo",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "incentives",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxIncentiveDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxIncentiveStartLeadTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFarmingCenterAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveMaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRates",
    values: [
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attachIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "detachIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterFarming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitFarming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingCenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incentives", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxIncentiveDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxIncentiveStartLeadTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFarmingCenterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRates", data: BytesLike): Result;

  events: {
    "FarmEnded(uint256,bytes32,address,address,address,uint256,uint256)": EventFragment;
    "FarmStarted(uint256,bytes32,uint128)": EventFragment;
    "IncentiveAttached(address,address,address,address,uint256,uint256)": EventFragment;
    "IncentiveCreated(address,address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "IncentiveDetached(address,address,address,address,uint256,uint256)": EventFragment;
    "IncentiveMakerChanged(address,address)": EventFragment;
    "RewardClaimed(address,uint256,address,address)": EventFragment;
    "RewardsAdded(uint256,uint256,bytes32)": EventFragment;
    "RewardsRatesChanged(uint128,uint128,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FarmEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveAttached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveDetached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveMakerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsRatesChanged"): EventFragment;
}

export class EternalFarming extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EternalFarmingInterface;

  functions: {
    addRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardAmount: BigNumberish,
      bonusRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      rewardToken: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardFrom(
      rewardToken: string,
      from: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      reward: BigNumberish,
      bonusReward: BigNumberish,
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    detachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingCenter(overrides?: CallOverrides): Promise<[string]>;

    farms(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
        innerRewardGrowth0: BigNumber;
        innerRewardGrowth1: BigNumber;
      }
    >;

    getRewardInfo(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; bonusReward: BigNumber }
    >;

    incentives(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean, BigNumber] & {
        totalReward: BigNumber;
        bonusReward: BigNumber;
        virtualPoolAddress: string;
        numberOfFarms: BigNumber;
        isPoolCreated: boolean;
        totalLiquidity: BigNumber;
      }
    >;

    maxIncentiveDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxIncentiveStartLeadTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFarmingCenterAddress(
      _farmingCenter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIncentiveMaker(
      _incentiveMaker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRates(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRewards(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    rewardAmount: BigNumberish,
    bonusRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attachIncentive(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    rewardToken: string,
    to: string,
    amountRequested: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewardFrom(
    rewardToken: string,
    from: string,
    to: string,
    amountRequested: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectRewards(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    tokenId: BigNumberish,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIncentive(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    reward: BigNumberish,
    bonusReward: BigNumberish,
    rewardRate: BigNumberish,
    bonusRewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  detachIncentive(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterFarming(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitFarming(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    tokenId: BigNumberish,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingCenter(overrides?: CallOverrides): Promise<string>;

  farms(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      tickLower: number;
      tickUpper: number;
      innerRewardGrowth0: BigNumber;
      innerRewardGrowth1: BigNumber;
    }
  >;

  getRewardInfo(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reward: BigNumber; bonusReward: BigNumber }
  >;

  incentives(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, boolean, BigNumber] & {
      totalReward: BigNumber;
      bonusReward: BigNumber;
      virtualPoolAddress: string;
      numberOfFarms: BigNumber;
      isPoolCreated: boolean;
      totalLiquidity: BigNumber;
    }
  >;

  maxIncentiveDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxIncentiveStartLeadTime(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  rewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFarmingCenterAddress(
    _farmingCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIncentiveMaker(
    _incentiveMaker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRates(
    key: {
      rewardToken: string;
      bonusRewardToken: string;
      pool: string;
      startTime: BigNumberish;
      endTime: BigNumberish;
    },
    rewardRate: BigNumberish,
    bonusRewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardAmount: BigNumberish,
      bonusRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      rewardToken: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewardFrom(
      rewardToken: string,
      from: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    createIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      reward: BigNumberish,
      bonusReward: BigNumberish,
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    detachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    enterFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exitFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    farmingCenter(overrides?: CallOverrides): Promise<string>;

    farms(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
        innerRewardGrowth0: BigNumber;
        innerRewardGrowth1: BigNumber;
      }
    >;

    getRewardInfo(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; bonusReward: BigNumber }
    >;

    incentives(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean, BigNumber] & {
        totalReward: BigNumber;
        bonusReward: BigNumber;
        virtualPoolAddress: string;
        numberOfFarms: BigNumber;
        isPoolCreated: boolean;
        totalLiquidity: BigNumber;
      }
    >;

    maxIncentiveDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxIncentiveStartLeadTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFarmingCenterAddress(
      _farmingCenter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncentiveMaker(
      _incentiveMaker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRates(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FarmEnded(
      tokenId?: BigNumberish | null,
      incentiveId?: BytesLike | null,
      rewardAddress?: string | null,
      bonusRewardToken?: null,
      owner?: null,
      reward?: null,
      bonusReward?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        incentiveId: string;
        rewardAddress: string;
        bonusRewardToken: string;
        owner: string;
        reward: BigNumber;
        bonusReward: BigNumber;
      }
    >;

    FarmStarted(
      tokenId?: BigNumberish | null,
      incentiveId?: BytesLike | null,
      liquidity?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { tokenId: BigNumber; incentiveId: string; liquidity: BigNumber }
    >;

    IncentiveAttached(
      rewardToken?: string | null,
      bonusRewardToken?: string | null,
      pool?: string | null,
      virtualPool?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        virtualPool: string;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    IncentiveCreated(
      rewardToken?: string | null,
      bonusRewardToken?: string | null,
      pool?: string | null,
      virtualPool?: null,
      startTime?: null,
      endTime?: null,
      reward?: null,
      bonusReward?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        virtualPool: string;
        startTime: BigNumber;
        endTime: BigNumber;
        reward: BigNumber;
        bonusReward: BigNumber;
      }
    >;

    IncentiveDetached(
      rewardToken?: string | null,
      bonusRewardToken?: string | null,
      pool?: string | null,
      virtualPool?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        virtualPool: string;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    IncentiveMakerChanged(
      incentiveMaker?: string | null,
      _incentiveMaker?: string | null
    ): TypedEventFilter<
      [string, string],
      { incentiveMaker: string; _incentiveMaker: string }
    >;

    RewardClaimed(
      to?: string | null,
      reward?: null,
      rewardAddress?: string | null,
      owner?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { to: string; reward: BigNumber; rewardAddress: string; owner: string }
    >;

    RewardsAdded(
      rewardAmount?: null,
      bonusRewardAmount?: null,
      incentiveId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      {
        rewardAmount: BigNumber;
        bonusRewardAmount: BigNumber;
        incentiveId: string;
      }
    >;

    RewardsRatesChanged(
      rewardRate?: null,
      bonusRewardRate?: null,
      incentiveId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { rewardRate: BigNumber; bonusRewardRate: BigNumber; incentiveId: string }
    >;
  };

  estimateGas: {
    addRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardAmount: BigNumberish,
      bonusRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      rewardToken: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewardFrom(
      rewardToken: string,
      from: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      reward: BigNumberish,
      bonusReward: BigNumberish,
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    detachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingCenter(overrides?: CallOverrides): Promise<BigNumber>;

    farms(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardInfo(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentives(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    maxIncentiveDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxIncentiveStartLeadTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFarmingCenterAddress(
      _farmingCenter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIncentiveMaker(
      _incentiveMaker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRates(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardAmount: BigNumberish,
      bonusRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      rewardToken: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardFrom(
      rewardToken: string,
      from: string,
      to: string,
      amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectRewards(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      reward: BigNumberish,
      bonusReward: BigNumberish,
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    detachIncentive(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitFarming(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingCenter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farms(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardInfo(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentives(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxIncentiveDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxIncentiveStartLeadTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFarmingCenterAddress(
      _farmingCenter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIncentiveMaker(
      _incentiveMaker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRates(
      key: {
        rewardToken: string;
        bonusRewardToken: string;
        pool: string;
        startTime: BigNumberish;
        endTime: BigNumberish;
      },
      rewardRate: BigNumberish,
      bonusRewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
