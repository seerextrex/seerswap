/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolInterface extends ethers.utils.Interface {
  functions: {
    "activeIncentive()": FunctionFragment;
    "burn(int24,int24,uint128)": FunctionFragment;
    "collect(address,int24,int24,uint128,uint128)": FunctionFragment;
    "dataStorageOperator()": FunctionFragment;
    "factory()": FunctionFragment;
    "flash(address,uint256,uint256,bytes)": FunctionFragment;
    "getInnerCumulatives(int24,int24)": FunctionFragment;
    "getTimepoints(uint32[])": FunctionFragment;
    "globalState()": FunctionFragment;
    "initialize(uint160)": FunctionFragment;
    "liquidity()": FunctionFragment;
    "liquidityCooldown()": FunctionFragment;
    "maxLiquidityPerTick()": FunctionFragment;
    "mint(address,address,int24,int24,uint128,bytes)": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "setCommunityFee(uint8,uint8)": FunctionFragment;
    "setIncentive(address)": FunctionFragment;
    "setLiquidityCooldown(uint32)": FunctionFragment;
    "swap(address,bool,int256,uint160,bytes)": FunctionFragment;
    "swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "tickTable(int16)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "timepoints(uint256)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalFeeGrowth0Token()": FunctionFragment;
    "totalFeeGrowth1Token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataStorageOperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInnerCumulatives",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimepoints",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidityPerTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommunityFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSupportingFeeOnInputTokens",
    values: [string, string, boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "timepoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth0Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth1Token",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataStorageOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInnerCumulatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimepoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidityPerTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommunityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapSupportingFeeOnInputTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timepoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth0Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth1Token",
    data: BytesLike
  ): Result;

  events: {
    "Burn(address,int24,int24,uint128,uint256,uint256)": EventFragment;
    "ChangeFee(uint16)": EventFragment;
    "Collect(address,address,int24,int24,uint128,uint128)": EventFragment;
    "CollectCommunityFee(address,address,uint128,uint128)": EventFragment;
    "Flash(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "IncentiveSet(address)": EventFragment;
    "Initialize(uint160,int24)": EventFragment;
    "Mint(address,address,int24,int24,uint128,uint256,uint256)": EventFragment;
    "SetCommunityFee(uint8,uint8,uint8,uint8)": EventFragment;
    "Swap(address,address,int256,int256,uint160,uint128,int24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectCommunityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncentiveSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCommunityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    bottomTick: number;
    topTick: number;
    amount: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type ChangeFeeEvent = TypedEvent<[number] & { Fee: number }>;

export type CollectEvent = TypedEvent<
  [string, string, number, number, BigNumber, BigNumber] & {
    owner: string;
    recipient: string;
    bottomTick: number;
    topTick: number;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type CollectCommunityFeeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    sender: string;
    recipient: string;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type FlashEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    recipient: string;
    amount0: BigNumber;
    amount1: BigNumber;
    paid0: BigNumber;
    paid1: BigNumber;
  }
>;

export type IncentiveSetEvent = TypedEvent<
  [string] & { virtualPoolAddress: string }
>;

export type InitializeEvent = TypedEvent<
  [BigNumber, number] & { price: BigNumber; tick: number }
>;

export type MintEvent = TypedEvent<
  [string, string, number, number, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    owner: string;
    bottomTick: number;
    topTick: number;
    amount: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type SetCommunityFeeEvent = TypedEvent<
  [number, number, number, number] & {
    communityFee0Old: number;
    communityFee1Old: number;
    communityFee0New: number;
    communityFee1New: number;
  }
>;

export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
    sender: string;
    recipient: string;
    amount0: BigNumber;
    amount1: BigNumber;
    price: BigNumber;
    liquidity: BigNumber;
    tick: number;
  }
>;

export class Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolInterface;

  functions: {
    activeIncentive(overrides?: CallOverrides): Promise<[string]>;

    burn(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount0Requested: BigNumberish,
      amount1Requested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dataStorageOperator(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        innerTickCumulative: BigNumber;
        innerSecondsSpentPerLiquidity: BigNumber;
        innerSecondsSpent: number;
      }
    >;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        timepointIndexSwap: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    initialize(
      initialPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityCooldown(overrides?: CallOverrides): Promise<[number]>;

    maxLiquidityPerTick(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      sender: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      _liquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        lastModificationTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    setCommunityFee(
      communityFee0: BigNumberish,
      communityFee1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIncentive(
      virtualPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityCooldown(
      newLiquidityCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapSupportingFeeOnInputTokens(
      sender: string,
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activeIncentive(overrides?: CallOverrides): Promise<string>;

  burn(
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    recipient: string,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    amount0Requested: BigNumberish,
    amount1Requested: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dataStorageOperator(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  flash(
    recipient: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInnerCumulatives(
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      innerTickCumulative: BigNumber;
      innerSecondsSpentPerLiquidity: BigNumber;
      innerSecondsSpent: number;
    }
  >;

  getTimepoints(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
      tickCumulatives: BigNumber[];
      secondsPerLiquidityCumulatives: BigNumber[];
      volatilityCumulatives: BigNumber[];
      volumePerAvgLiquiditys: BigNumber[];
    }
  >;

  globalState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, number, boolean] & {
      price: BigNumber;
      tick: number;
      fee: number;
      timepointIndex: number;
      timepointIndexSwap: number;
      communityFeeToken0: number;
      communityFeeToken1: number;
      unlocked: boolean;
    }
  >;

  initialize(
    initialPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityCooldown(overrides?: CallOverrides): Promise<number>;

  maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    sender: string,
    recipient: string,
    bottomTick: BigNumberish,
    topTick: BigNumberish,
    _liquidity: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      lastModificationTimestamp: number;
      innerFeeGrowth0Token: BigNumber;
      innerFeeGrowth1Token: BigNumber;
      fees0: BigNumber;
      fees1: BigNumber;
    }
  >;

  setCommunityFee(
    communityFee0: BigNumberish,
    communityFee1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIncentive(
    virtualPoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityCooldown(
    newLiquidityCooldown: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    recipient: string,
    zeroForOne: boolean,
    amountRequired: BigNumberish,
    limitSqrtPrice: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapSupportingFeeOnInputTokens(
    sender: string,
    recipient: string,
    zeroForOne: boolean,
    amountRequired: BigNumberish,
    limitSqrtPrice: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  tickTable(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      liquidityTotal: BigNumber;
      liquidityDelta: BigNumber;
      outerFeeGrowth0Token: BigNumber;
      outerFeeGrowth1Token: BigNumber;
      outerTickCumulative: BigNumber;
      outerSecondsPerLiquidity: BigNumber;
      outerSecondsSpent: number;
      initialized: boolean;
    }
  >;

  timepoints(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      initialized: boolean;
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulative: BigNumber;
      volatilityCumulative: BigNumber;
      averageTick: number;
      volumePerLiquidityCumulative: BigNumber;
    }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activeIncentive(overrides?: CallOverrides): Promise<string>;

    burn(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    collect(
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount0Requested: BigNumberish,
      amount1Requested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    dataStorageOperator(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        innerTickCumulative: BigNumber;
        innerSecondsSpentPerLiquidity: BigNumber;
        innerSecondsSpent: number;
      }
    >;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber[]] & {
        tickCumulatives: BigNumber[];
        secondsPerLiquidityCumulatives: BigNumber[];
        volatilityCumulatives: BigNumber[];
        volumePerAvgLiquiditys: BigNumber[];
      }
    >;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        timepointIndexSwap: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    initialize(
      initialPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCooldown(overrides?: CallOverrides): Promise<number>;

    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      sender: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      _liquidity: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        liquidityAmount: BigNumber;
      }
    >;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        lastModificationTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    setCommunityFee(
      communityFee0: BigNumberish,
      communityFee1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncentive(
      virtualPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityCooldown(
      newLiquidityCooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    swapSupportingFeeOnInputTokens(
      sender: string,
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Burn(address,int24,int24,uint128,uint256,uint256)"(
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        bottomTick: number;
        topTick: number;
        amount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Burn(
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, number, number, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        bottomTick: number;
        topTick: number;
        amount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "ChangeFee(uint16)"(
      Fee?: null
    ): TypedEventFilter<[number], { Fee: number }>;

    ChangeFee(Fee?: null): TypedEventFilter<[number], { Fee: number }>;

    "Collect(address,address,int24,int24,uint128,uint128)"(
      owner?: string | null,
      recipient?: null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber],
      {
        owner: string;
        recipient: string;
        bottomTick: number;
        topTick: number;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Collect(
      owner?: string | null,
      recipient?: null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber],
      {
        owner: string;
        recipient: string;
        bottomTick: number;
        topTick: number;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "CollectCommunityFee(address,address,uint128,uint128)"(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    CollectCommunityFee(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Flash(address,address,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        paid0: BigNumber;
        paid1: BigNumber;
      }
    >;

    Flash(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      paid0?: null,
      paid1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        paid0: BigNumber;
        paid1: BigNumber;
      }
    >;

    "IncentiveSet(address)"(
      virtualPoolAddress?: null
    ): TypedEventFilter<[string], { virtualPoolAddress: string }>;

    IncentiveSet(
      virtualPoolAddress?: null
    ): TypedEventFilter<[string], { virtualPoolAddress: string }>;

    "Initialize(uint160,int24)"(
      price?: null,
      tick?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { price: BigNumber; tick: number }
    >;

    Initialize(
      price?: null,
      tick?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { price: BigNumber; tick: number }
    >;

    "Mint(address,address,int24,int24,uint128,uint256,uint256)"(
      sender?: null,
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        owner: string;
        bottomTick: number;
        topTick: number;
        amount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Mint(
      sender?: null,
      owner?: string | null,
      bottomTick?: BigNumberish | null,
      topTick?: BigNumberish | null,
      amount?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, number, number, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        owner: string;
        bottomTick: number;
        topTick: number;
        amount: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "SetCommunityFee(uint8,uint8,uint8,uint8)"(
      communityFee0Old?: null,
      communityFee1Old?: null,
      communityFee0New?: null,
      communityFee1New?: null
    ): TypedEventFilter<
      [number, number, number, number],
      {
        communityFee0Old: number;
        communityFee1Old: number;
        communityFee0New: number;
        communityFee1New: number;
      }
    >;

    SetCommunityFee(
      communityFee0Old?: null,
      communityFee1Old?: null,
      communityFee0New?: null,
      communityFee1New?: null
    ): TypedEventFilter<
      [number, number, number, number],
      {
        communityFee0Old: number;
        communityFee1Old: number;
        communityFee0New: number;
        communityFee1New: number;
      }
    >;

    "Swap(address,address,int256,int256,uint160,uint128,int24)"(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      price?: null,
      liquidity?: null,
      tick?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        tick: number;
      }
    >;

    Swap(
      sender?: string | null,
      recipient?: string | null,
      amount0?: null,
      amount1?: null,
      price?: null,
      liquidity?: null,
      tick?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
      {
        sender: string;
        recipient: string;
        amount0: BigNumber;
        amount1: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        tick: number;
      }
    >;
  };

  estimateGas: {
    activeIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount0Requested: BigNumberish,
      amount1Requested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dataStorageOperator(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalState(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initialPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      sender: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      _liquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setCommunityFee(
      communityFee0: BigNumberish,
      communityFee1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIncentive(
      virtualPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityCooldown(
      newLiquidityCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapSupportingFeeOnInputTokens(
      sender: string,
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      amount0Requested: BigNumberish,
      amount1Requested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dataStorageOperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flash(
      recipient: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInnerCumulatives(
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimepoints(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initialPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidityPerTick(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      sender: string,
      recipient: string,
      bottomTick: BigNumberish,
      topTick: BigNumberish,
      _liquidity: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCommunityFee(
      communityFee0: BigNumberish,
      communityFee1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIncentive(
      virtualPoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityCooldown(
      newLiquidityCooldown: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapSupportingFeeOnInputTokens(
      sender: string,
      recipient: string,
      zeroForOne: boolean,
      amountRequired: BigNumberish,
      limitSqrtPrice: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickTable(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFeeGrowth0Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeeGrowth1Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
